# Задача 2. Найдите корни квадратного уравнения Ax² + Bx + C = 0

# вариант через ввод чисел
a, b, c = int(input('Введите число a: ')), int(
    input('Введите число b: ')), int(input('Введите число c: '))
d = b ** 2 - 4 * a * c  # дескриминант
if d < 0:
    print('Корней нет')
elif d == 0:
    print(round(- b / (2 * a), 2))
else:
    print(round((- b + (d ** 0.5)) / (2 * a), 2))
    print(round((- b - (d ** 0.5)) / (2 * a), 2))

# вариант через строку
str1 = '- 4 * x^2 + 4 * x + 1 = 0'
nums = str1.split() # создаем список элементов, для разделения ориентируемся на пробел
nums1 = [] # создаем новый пустой список
for i in nums: # через цикл про бегаемся по скиску и копируем в него только числа и знак "-"
    if i.isdigit() or i == '-': # проверка является ли символ числом или знаком "-"
        nums1.append(i) # если да, то добавляем его в конец нового списка
    if i == '=': # если у нас знак "=", то останавливаем цикл, тем самым мы не вносим в новый список число 0
        break
print(nums1) # выводим в терминал полученный новый список

# данный цикл помогает объеденить знак "-" с последующим числом
i = 0
while nums1.count('-') != 0: # цикл работает пока в списке есть отдельно стоящие знаки "-"
    if nums1[i] == '-': # если элемента списка равен "-" ..
        nums1[i] += nums1[i + 1] # .. то пристегиваем его к следующему за ним элементу
        nums1.pop(i + 1) # а следующий элемент удаляем
        i = 0 # обнуляем для того чтобы не выйти за пределы списка
    i += 1 # прибавляем +1 чтобы цикл не превратился в вечный
print(nums1) # вывод откорректированного списка

a, b, c = int(nums1[0]), int(nums1[1]), int(nums1[2]) # элементы списка присваиваем к переменным a,b,c
d = b ** 2 - 4 * a * c  # дескриминант
if d < 0:
    print('Корней нет')
elif d == 0:
    print(round(- b / (2 * a), 2))
else:
    print(round((- b + (d ** 0.5)) / (2 * a), 2))
    print(round((- b - (d ** 0.5)) / (2 * a), 2))